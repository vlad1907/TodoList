{"version":3,"sources":["features/App/selectors.ts","utils/redux-utils.ts","features/CommonActions/App.ts","components/ErrorSnackBar/ErrorSnackBar.tsx","api/types.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistList/selectors.ts","api/todolists-api.ts","utils/error-utils.ts","features/TodolistList/todolist/todolist-reducer.ts","features/TodolistList/todolist/task/tasks-reducer.ts","features/TodolistList/index.ts","features/TodolistList/todolist/task/Task.tsx","features/TodolistList/todolist/TodoList.tsx","features/Auth/selectors.ts","features/Auth/auth-reducer.ts","features/Auth/Login.tsx","features/Auth/index.ts","features/TodolistList/TodolistsList.tsx","features/App/app-reducer.ts","features/App/index.ts","app/App.tsx","serviceWorker.ts","app/store.ts","index.tsx"],"names":["selectStatus","state","app","status","selectIsInitialized","isInitialized","selectError","error","useAppDispatch","useDispatch","useActions","action","dispatch","useMemo","bindActionCreators","setAppStatus","createAction","appActions","setAppError","Alert","React","props","ref","elevation","variant","ErrorSnackbar","useSelector","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","width","TaskStatuses","TaskPriorities","ResultCodeStatuses","AddItemForm","memo","callbackAddValue","entityStatus","useState","title","setTitle","setError","onClickAddTask","trimmedTitle","trim","TextField","value","onChange","e","currentTarget","onKeyPress","key","label","className","helperText","disabled","IconButton","color","onClick","AddBox","fontSize","EditableSpan","edit","setEdit","autoFocus","onBlur","callbackUpdate","size","onDoubleClick","selectTodolists","todolists","selectTasks","tasks","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","post","todolistId","delete","put","taskId","model","authAPI","data","handleAsyncServerAppError","thunkAPI","showError","messages","length","rejectWithValue","errors","fieldsErrors","handleAsyncServerNetworkError","message","undefined","getTodolists","createAsyncThunk","param","a","addTodolist","res","resultCode","success","todolist","item","removeTodolist","changeTodolistEntityStatus","todolistID","id","changeTodolistTitle","asyncActions","slice","createSlice","name","initialState","reducers","changeFilterAC","index","findIndex","el","payload","filter","clearDataAC","extraReducers","builder","addCase","fulfilled","map","unshift","splice","actions","getTasks","items","addTask","removeTask","updateTask","getState","task","find","t","apiModel","deadline","description","priority","startDate","todolistActions","forEach","todoListId","tasksReducer","reducer","taskSliceActions","todolistReducer","todolistSlice","asyncTodolistActions","tasksActions","asyncTaskActions","Task","removeTaskCallback","useCallback","changeStatus","checked","Completed","New","updateTaskTitle","Checkbox","TodoList","useEffect","addTaskCallback","changeTodoTitle","onFilterButton","tasksForTodolist","Delete","List","style","padding","Button","selectIsLoggedIn","auth","isLoggedIn","login","logout","setIsLoggedIn","Login","authSelectors","formik","useFormik","initialValues","email","password","rememberMe","validate","values","test","onSubmit","formikHelpers","authActions","rejected","match","setFieldError","field","to","Grid","container","justifyContent","Paper","background","handleSubmit","FormControl","FormLabel","href","target","rel","FormGroup","margin","getFieldProps","touched","type","FormControlLabel","control","authReducer","TodolistsList","todolistSelectors","navigate","useNavigate","addTodolists","spacing","todolistTasks","initializedApp","appReducer","App","logoutHandler","Box","flexGrow","AppBar","position","Toolbar","edge","aria-label","mr","Menu","Typography","component","LinearProgress","Container","fixed","path","element","textAlign","top","CircularProgress","Boolean","window","location","hostname","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.d4f8c66a.chunk.js","sourcesContent":["import {AppRootStoreType} from \"../../utils/types\";\r\n\r\nexport const selectStatus = (state: AppRootStoreType) => state.app.status\r\nexport const selectIsInitialized = (state: AppRootStoreType) => state.app.isInitialized\r\nexport const selectError = (state: AppRootStoreType) => state.app.error","import {useDispatch} from \"react-redux\";\r\nimport {ActionCreatorsMapObject, bindActionCreators} from \"redux\";\r\nimport {useMemo} from \"react\";\r\nimport {AppDispatchType} from \"./types\";\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatchType>()\r\nexport function useActions<T extends ActionCreatorsMapObject<any>>(action: T) {\r\n    const dispatch = useAppDispatch()\r\n\r\n    const boundActions = useMemo(() => {\r\n        return bindActionCreators(action, dispatch)\r\n    }, [])\r\n\r\n    return boundActions\r\n}","import {createAction} from \"@reduxjs/toolkit\";\r\nimport {RequestStatusType} from \"../App/app-reducer\";\r\n\r\nconst setAppStatus = createAction<{status: RequestStatusType}>('app/setAppStatus')\r\nconst setAppError = createAction<{error: string | null}>('appAction/setAppError')\r\n\r\nexport const appActions = {\r\n    setAppError,\r\n    setAppStatus\r\n}","import * as React from 'react';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, {AlertProps} from '@mui/material/Alert';\r\nimport {useSelector} from \"react-redux\";\r\nimport {selectError} from \"../../features/App/selectors\";\r\nimport {useActions} from \"../../utils/redux-utils\";\r\nimport {appActions} from \"../../features/CommonActions/App\";\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props,\r\n    ref,\r\n) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nexport function ErrorSnackbar() {\r\n    const error = useSelector(selectError);\r\n    const {setAppError} = useActions(appActions)\r\n\r\n    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        setAppError({error: null})\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}\r\n","export type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe?: boolean\r\n    captcha?: string\r\n}\r\nexport type TodolistType = {\r\n    id: string\r\n    addedDate: string\r\n    order: number\r\n    title: string\r\n}\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\nexport enum ResultCodeStatuses {\r\n    success = 0,\r\n    error = 1,\r\n    captcha = 10\r\n}\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskType = {\r\n    title: string\r\n    description: string\r\n    status: number\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n}\r\nexport type FieldsErrorType = {field: string, error: string}\r\nexport type ResponseType<D> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors?: Array<FieldsErrorType>\r\n    data: D\r\n}\r\nexport type GetTasksResponseType = {\r\n    items: Array<TaskType>\r\n    totalCount: number\r\n    error: string | null\r\n}","import React, {ChangeEvent, useState, KeyboardEvent} from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport {IconButton} from \"@mui/material\";\r\nimport {AddBox} from \"@mui/icons-material\";\r\nimport {RequestStatusType} from \"../../features/App/app-reducer\";\r\n\r\nexport type AddItemFormSubmitHelperType = { setError: (error: string) => void, setTitle: (title: string) => void}\r\ntype InputFormType = {\r\n    callbackAddValue: (title: string) => void\r\n    entityStatus?: RequestStatusType\r\n}\r\nconst AddItemForm: React.FC<InputFormType> = React.memo(({callbackAddValue, entityStatus}) => {\r\n    const [title, setTitle] = useState<string>('')\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    const onClickAddTask = () => {\r\n        const trimmedTitle = title.trim()\r\n        if (trimmedTitle) {\r\n            callbackAddValue(trimmedTitle)\r\n        } else {\r\n            setError('Title is required')\r\n        }\r\n        setTitle('')\r\n    }\r\n    const onChangeSetTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n        setError(null)\r\n    }\r\n    const onKeyPressSetTitle = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        e.key === 'Enter' && onClickAddTask()\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField value={title}\r\n                       error={!!error}\r\n                       onChange={onChangeSetTitle}\r\n                       onKeyPress={onKeyPressSetTitle}\r\n                       label={'Title'}\r\n                       className={error ? 'error' : ''}\r\n                       helperText={error}\r\n                       disabled={entityStatus === 'loading'}/>\r\n\r\n            <IconButton color=\"primary\" onClick={onClickAddTask}>\r\n                <AddBox fontSize='large'/>\r\n            </IconButton>\r\n        </div>\r\n    );\r\n})\r\n\r\nexport default AddItemForm;\r\n\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport TextField from '@mui/material/TextField';\r\n\r\ntype EditableSpanType = {\r\n    value: string\r\n    callbackUpdate: (title: string) => void\r\n}\r\n\r\nconst EditableSpan = React.memo((props: EditableSpanType) => {\r\n        const [edit, setEdit] = useState<boolean>(false);\r\n        const [title, setTitle] = useState<string>('')\r\n\r\n        const activateEditMode = () => {\r\n            setEdit(true)\r\n            setTitle(props.value)\r\n        }\r\n        const deactivateEditMode = () => {\r\n            props.callbackUpdate(title)\r\n            setEdit(false)\r\n        }\r\n        const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n            setTitle(e.currentTarget.value)\r\n        }\r\n\r\n        return (\r\n            edit\r\n                ? <TextField variant=\"outlined\"\r\n                             value={title}\r\n                             onChange={changeTitle}\r\n                             autoFocus\r\n                             onBlur={deactivateEditMode}\r\n                             size={'small'}\r\n                />\r\n                : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n        );\r\n    }\r\n);\r\n\r\nexport default EditableSpan;","import {AppRootStoreType} from \"../../utils/types\";\r\n\r\nexport const selectTodolists = (state: AppRootStoreType) => state.todolists\r\nexport const selectTasks = (state: AppRootStoreType) => state.tasks\r\n","import axios from 'axios'\r\nimport {GetTasksResponseType, LoginParamsType, TaskType, TodolistType, UpdateTaskType, ResponseType} from \"./types\";\r\n\r\nconst settings = {\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'f6e09271-9951-4ca7-8fbf-c73bc4098a4f'\r\n    }\r\n}\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    ...settings\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolist() {\r\n        return instance.get<Array<TodolistType>>('todo-lists')\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<ResponseType<{item: TodolistType}>>('todo-lists', {title})\r\n    },\r\n    deleteTodolist(todolistId: string) {\r\n        return instance.delete<ResponseType<{}>>(`todo-lists/${todolistId}`)\r\n    },\r\n    updateTodolist(todolistId: string, title: string) {\r\n        return instance.put<ResponseType<{}>>(`todo-lists/${todolistId}`, {title})\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponseType>(`todo-lists/${todolistId}/tasks`)\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<ResponseType<{item: TaskType}>>(`todo-lists/${todolistId}/tasks`, {title})\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskType) {\r\n        return instance.put<ResponseType<{item: TaskType}>>(`/todo-lists/${todolistId}/tasks/${taskId}`, model)\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType<{}>>(`/todo-lists/${todolistId}/tasks/${taskId}`)\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<ResponseType<{userId: number}>>('auth/login', data);\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType<{}>>('auth/login');\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<{id: number, email: string, login: string}>>('/auth/me');\r\n    }\r\n}\r\n","import {appActions} from \"../features/CommonActions/App\";\r\nimport {ResponseType} from '../api/types';\r\nimport {AxiosError} from \"axios\";\r\n\r\n// original type:\r\n// BaseThunkAPI<S, E, D extends Dispatch = Dispatch, RejectedValue = undefined>\r\ntype ThunkAPIType = {\r\n    dispatch: (action: any) => any\r\n    rejectWithValue: Function\r\n}\r\n\r\nexport const handleAsyncServerAppError = <D>(data: ResponseType<D>, thunkAPI: ThunkAPIType, showError = true) => {\r\n    if (showError) {\r\n        thunkAPI.dispatch(appActions.setAppError({error: data.messages.length ? data.messages[0] : 'some error occurred'}))\r\n    }\r\n    thunkAPI.dispatch(appActions.setAppStatus({status: 'failed'}));\r\n    return thunkAPI.rejectWithValue({errors: data.messages, fieldsErrors: data.fieldsErrors});\r\n}\r\n\r\nexport const handleAsyncServerNetworkError = (error: AxiosError, thunkAPI: ThunkAPIType, showError = true) => {\r\n    if (showError) {\r\n        thunkAPI.dispatch(appActions.setAppError({error: error.message ? error.message : 'some error occurred'}))\r\n    }\r\n    thunkAPI.dispatch(appActions.setAppStatus({status: 'failed'}));\r\n    return thunkAPI.rejectWithValue({errors: [error.message], fieldsErrors: undefined});\r\n}","import {todolistsAPI} from \"../../../api/todolists-api\";\r\nimport {RequestStatusType} from \"../../App/app-reducer\";\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {ResultCodeStatuses, TodolistType} from \"../../../api/types\";\r\nimport {appActions} from \"../../CommonActions/App\";\r\nimport {handleAsyncServerAppError, handleAsyncServerNetworkError} from \"../../../utils/error-utils\";\r\nimport {ThunkError} from \"../../../utils/types\";\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed'\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\nconst {setAppStatus} = appActions\r\n\r\nconst getTodolists = createAsyncThunk<{ todolists: TodolistType[] }, undefined, ThunkError>('todolists/getTodolists', async (param, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n    try {\r\n        const data = await todolistsAPI.getTodolist()\r\n        thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n        return {todolists: data.data}\r\n    } catch (err: any) {\r\n        return handleAsyncServerNetworkError(err, thunkAPI)\r\n    }\r\n})\r\nconst addTodolist = createAsyncThunk<{todolist: TodolistType}, string, ThunkError>\r\n('todolists/addTodolist', async (title, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n    try {\r\n        const res = await todolistsAPI.createTodolist(title)\r\n        if (res.data.resultCode === ResultCodeStatuses.success) {\r\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n            return {todolist: res.data.data.item}\r\n        } else {\r\n            return handleAsyncServerAppError(res.data, thunkAPI, false)\r\n        }\r\n    } catch (err: any) {\r\n        return handleAsyncServerNetworkError(err, thunkAPI, false)\r\n    }\r\n})\r\nconst removeTodolist = createAsyncThunk<{ id: string }, string, ThunkError>('todolists/removeTodolist', async (todolistId, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n    thunkAPI.dispatch(changeTodolistEntityStatus({todolistID: todolistId, status: 'loading'}))\r\n    try {\r\n        const res = await todolistsAPI.deleteTodolist(todolistId)\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n            return {id: todolistId}\r\n        } else {\r\n            return handleAsyncServerAppError(res.data, thunkAPI, false)\r\n        }\r\n    } catch (err: any) {\r\n        return handleAsyncServerNetworkError(err, thunkAPI)\r\n    }\r\n})\r\nconst changeTodolistTitle = createAsyncThunk('todolists/changeTodolistTitle', async (param: { todolistId: string, title: string }, thunkAPI) => {\r\n    try {\r\n        const res = await todolistsAPI.updateTodolist(param.todolistId, param.title)\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n            return {id: param.todolistId, title: param.title}\r\n        } else {\r\n            return handleAsyncServerAppError(res.data, thunkAPI, false)\r\n        }\r\n    } catch (err: any) {\r\n        return handleAsyncServerNetworkError(err, thunkAPI)\r\n    }\r\n})\r\n\r\nexport const asyncActions = {\r\n    getTodolists,\r\n    addTodolist,\r\n    removeTodolist,\r\n    changeTodolistTitle\r\n}\r\n\r\nexport const slice = createSlice({\r\n    name: 'todolists',\r\n    initialState: [] as TodolistDomainType[],\r\n    reducers: {\r\n        changeFilterAC(state, action: PayloadAction<{ todolistId: string, value: FilterValuesType }>) {\r\n            // state.map(el => el.id === action.payload.todolistID ? {...el, filter: action.payload.value} : el);\r\n            const index = state.findIndex(el => el.id === action.payload.todolistId);\r\n            state[index].filter = action.payload.value;\r\n        },\r\n        changeTodolistEntityStatus(state, action: PayloadAction<{ todolistID: string, status: RequestStatusType }>) {\r\n            // state.map(el => el.id === action.payload.todolistId ? {...el, entityStatus: action.payload.status} : el);\r\n            const index = state.findIndex(el => el.id === action.payload.todolistID);\r\n            state[index].entityStatus = action.payload.status;\r\n        },\r\n        clearDataAC(state, action: PayloadAction) {\r\n            return []\r\n        }\r\n    },\r\n    extraReducers: builder => {\r\n        builder.addCase(getTodolists.fulfilled, (state, action) => {\r\n            return action.payload.todolists.map(el => ({...el, filter: 'all', entityStatus: 'idle'}))\r\n        });\r\n        builder.addCase(addTodolist.fulfilled, (state, action) => {\r\n            state.unshift({...action.payload.todolist, filter: 'all', entityStatus: 'idle'})\r\n        });\r\n        builder.addCase(removeTodolist.fulfilled, (state, action) => {\r\n            // state.filter(el => el.id !== action.payload.todolistID);\r\n            const index = state.findIndex(el => el.id === action.payload.id);\r\n            if (index > -1) {\r\n                state.splice(index, 1);\r\n            }\r\n        });\r\n        builder.addCase(changeTodolistTitle.fulfilled, (state, action) => {\r\n            // state.map(el => el.id === action.payload.todolistID ? {...el, title: action.payload.title} : el);\r\n            const index = state.findIndex(el => el.id === action.payload.id);\r\n            if (index > -1) {\r\n                state[index].title = action.payload.title;\r\n            }\r\n        })\r\n    }\r\n})\r\n\r\nexport const {changeFilterAC, changeTodolistEntityStatus} = slice.actions\r\n","import {todolistsAPI} from \"../../../../api/todolists-api\";\r\nimport {createAsyncThunk, createSlice} from \"@reduxjs/toolkit\";\r\nimport {ResultCodeStatuses, TaskPriorities, TaskStatuses, TaskType, UpdateTaskType} from \"../../../../api/types\";\r\nimport {appActions} from \"../../../CommonActions/App\";\r\nimport {AppRootStoreType, ThunkError} from \"../../../../utils/types\";\r\nimport {handleAsyncServerAppError, handleAsyncServerNetworkError} from \"../../../../utils/error-utils\";\r\nimport {todolistActions} from \"../../index\";\r\n\r\nconst initialState: TasksStateType = {}\r\nconst {setAppStatus} = appActions\r\n\r\nconst getTasks = createAsyncThunk('tasks/getTasks', async (todolistId: string, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n    try {\r\n        const res = await todolistsAPI.getTasks(todolistId);\r\n        thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n        return {tasks: res.data.items, todolistId: todolistId}\r\n    } catch (err: any) {\r\n        return handleAsyncServerNetworkError(err, thunkAPI)\r\n    }\r\n})\r\nconst addTask = createAsyncThunk('task/addTask', async (param: { todolistId: string, title: string }, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n    try {\r\n        const res = await todolistsAPI.createTask(param.todolistId, param.title);\r\n        if (res.data.resultCode === ResultCodeStatuses.success) {\r\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}));\r\n            return res.data.data.item;\r\n        } else {\r\n            return handleAsyncServerAppError(res.data, thunkAPI)\r\n        }\r\n    } catch (err: any) {\r\n        return handleAsyncServerNetworkError(err, thunkAPI)\r\n    }\r\n})\r\nconst removeTask = createAsyncThunk<{ taskId: string, todolistId: string }, { taskId: string, todolistId: string }, ThunkError>('task/removeTask', async (param: { taskId: string, todolistId: string }, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n    try {\r\n        await todolistsAPI.deleteTask(param.todolistId, param.taskId);\r\n        thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n        return {taskId: param.taskId, todolistId: param.todolistId}\r\n    } catch (err: any) {\r\n        return handleAsyncServerNetworkError(err, thunkAPI)\r\n    }\r\n})\r\nconst updateTask = createAsyncThunk('task/changeTaskStatus', async (param: { todolistId: string, taskId: string, model: UpdateDomainTaskModelType }, thunkAPI) => {\r\n    const state = thunkAPI.getState() as AppRootStoreType;\r\n    const task = state.tasks[param.todolistId].find(t => t.id === param.taskId)\r\n    if (!task) {\r\n        return thunkAPI.rejectWithValue('task is not found')\r\n    }\r\n    const apiModel: UpdateTaskType = {\r\n        deadline: task.deadline,\r\n        description: task.description,\r\n        priority: task.priority,\r\n        startDate: task.startDate,\r\n        title: task.title,\r\n        status: task.status,\r\n        ...param.model\r\n    }\r\n    try {\r\n        const res = await todolistsAPI.updateTask(param.todolistId, param.taskId, apiModel)\r\n        if (res.data.resultCode === ResultCodeStatuses.success) {\r\n            return param\r\n        } else {\r\n            return handleAsyncServerAppError(res.data, thunkAPI)\r\n        }\r\n    } catch (err: any) {\r\n        return handleAsyncServerNetworkError(err, thunkAPI)\r\n    }\r\n})\r\n\r\nexport const asyncActions = {\r\n    getTasks,\r\n    addTask,\r\n    removeTask,\r\n    updateTask\r\n}\r\n\r\nexport const slice = createSlice({\r\n    name: 'tasks',\r\n    initialState: initialState,\r\n    reducers: {},\r\n    extraReducers(builder) {\r\n        builder.addCase(todolistActions.addTodolist.fulfilled, (state, action) => {\r\n            state[action.payload.todolist.id] = [];\r\n        });\r\n        builder.addCase(todolistActions.removeTodolist.fulfilled, (state, action) => {\r\n            delete state[action.payload.id];\r\n        });\r\n        builder.addCase(todolistActions.getTodolists.fulfilled, (state, action) => {\r\n            action.payload.todolists.forEach(t => state[t.id] = [])\r\n        });\r\n        builder.addCase(todolistActions.clearDataAC, (state, action) => {\r\n            return {}\r\n        });\r\n        builder.addCase(getTasks.fulfilled, (state, action) => {\r\n            state[action.payload.todolistId] = action.payload.tasks;\r\n        });\r\n        builder.addCase(removeTask.fulfilled, (state, action) => {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks.splice(index, 1)\r\n            }\r\n        });\r\n        builder.addCase(addTask.fulfilled, (state, action) => {\r\n            state[action.payload.todoListId].unshift(action.payload);\r\n        });\r\n        builder.addCase(updateTask.fulfilled, (state, action) => {\r\n            const tasks = state[action.payload.todolistId];\r\n            const index = tasks.findIndex(el => el.id === action.payload.taskId);\r\n            if (index > -1) {\r\n                tasks[index] = {...tasks[index], ...action.payload.model};\r\n            }\r\n        });\r\n    }\r\n})\r\n\r\nexport const tasksReducer = slice.reducer;\r\nexport const taskSliceActions = slice.actions;\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\ntype UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}","import * as todolistSelectors from './selectors';\r\nimport {asyncActions as asyncTodolistActions, slice as todolistSlice} from \"./todolist/todolist-reducer\";\r\nimport TodolistsList from './TodolistsList';\r\nimport {tasksReducer, taskSliceActions, asyncActions as asyncTaskActions} from './todolist/task/tasks-reducer'\r\n\r\nconst todolistReducer = todolistSlice.reducer;\r\n\r\nconst todolistActions = {\r\n    ...todolistSlice.actions,\r\n    ...asyncTodolistActions,\r\n};\r\nconst tasksActions = {\r\n    ...taskSliceActions,\r\n    ...asyncTaskActions\r\n}\r\n\r\nexport {\r\n    todolistSelectors,\r\n    todolistActions,\r\n    todolistReducer,\r\n    TodolistsList,\r\n    tasksReducer,\r\n    tasksActions\r\n}","import React, {ChangeEvent, useCallback} from 'react';\r\nimport EditableSpan from \"../../../../components/EditableSpan/EditableSpan\";\r\nimport HighlightOffIcon from '@mui/icons-material/HighlightOff';\r\nimport {Checkbox, IconButton} from \"@mui/material\";\r\nimport {TaskStatuses, TaskType} from \"../../../../api/types\";\r\nimport {useActions} from \"../../../../utils/redux-utils\";\r\nimport {tasksActions} from \"../../index\";\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n}\r\nconst Task: React.FC<TaskPropsType> = ({task}) => {\r\n    const taskId = task.id\r\n    const todolistId = task.todoListId\r\n\r\n    const {removeTask, updateTask} = useActions(tasksActions)\r\n\r\n    const removeTaskCallback = useCallback(() => {\r\n        removeTask({taskId: taskId, todolistId: todolistId})\r\n    }, [taskId, todolistId])\r\n\r\n    const changeStatus = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n       updateTask({todolistId, taskId, model: {status: e.currentTarget.checked\r\n                   ? TaskStatuses.Completed\r\n                   : TaskStatuses.New}})\r\n    }, [todolistId, taskId])\r\n\r\n    const updateTaskTitle = useCallback((title: string) => {\r\n        updateTask({todolistId, taskId, model: {title}})\r\n    }, [todolistId, taskId])\r\n\r\n    return (\r\n        <div>\r\n            <Checkbox color={'primary'} onChange={changeStatus} checked={task.status === TaskStatuses.Completed}/>\r\n            <EditableSpan value={task.title} callbackUpdate={updateTaskTitle}/>\r\n            <IconButton onClick={removeTaskCallback}>\r\n                <HighlightOffIcon color={'inherit'}/>\r\n            </IconButton>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Task;","import React, {useCallback, useEffect} from 'react';\r\nimport {FilterValuesType, TodolistDomainType} from \"./todolist-reducer\";\r\nimport AddItemForm from \"../../../components/AddItemForm/AddItemForm\";\r\nimport EditableSpan from \"../../../components/EditableSpan/EditableSpan\";\r\nimport Task from \"./task/Task\";\r\nimport {Button, IconButton, List} from \"@mui/material\";\r\nimport {Delete} from \"@mui/icons-material\";\r\nimport {TaskStatuses, TaskType} from \"../../../api/types\";\r\nimport {useActions, useAppDispatch} from \"../../../utils/redux-utils\";\r\nimport {tasksActions, todolistActions} from \"../index\";\r\n\r\ntype TodoListPropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n}\r\n\r\nconst TodoList = React.memo(function ({tasks, todolist}: TodoListPropsType) {\r\n    const dispatch = useAppDispatch()\r\n    const todolistId = todolist.id\r\n\r\n    const {changeTodolistTitle, removeTodolist, changeFilterAC} = useActions(todolistActions)\r\n    const {addTask, getTasks} = useActions(tasksActions)\r\n\r\n    useEffect(() => {\r\n        getTasks(todolistId)\r\n    }, [])\r\n\r\n    const addTaskCallback = useCallback((title: string) => {\r\n        addTask({todolistId, title})\r\n    }, [todolistId])\r\n\r\n    const removeTodo = () => {\r\n        removeTodolist(todolistId)\r\n    }\r\n\r\n    const changeTodoTitle = useCallback((title: string) => {\r\n        changeTodolistTitle({todolistId, title})\r\n    }, [dispatch, todolistId])\r\n\r\n    const onFilterButton = useCallback((value: FilterValuesType) => {\r\n        changeFilterAC({todolistId, value})\r\n    }, [todolistId])\r\n\r\n    let tasksForTodolist = tasks;\r\n    if (todolist.filter === \"active\") {\r\n        tasksForTodolist = tasksForTodolist.filter(t => t.status === TaskStatuses.New);\r\n    }\r\n    if (todolist.filter === \"completed\") {\r\n        tasksForTodolist = tasksForTodolist.filter(t => t.status === TaskStatuses.Completed);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <h3><EditableSpan value={todolist.title} callbackUpdate={changeTodoTitle}/>\r\n                    <IconButton onClick={removeTodo} disabled={todolist.entityStatus === 'loading'}>\r\n                        <Delete/>\r\n                    </IconButton>\r\n                </h3>\r\n                <AddItemForm callbackAddValue={addTaskCallback} entityStatus={todolist.entityStatus}/>\r\n            </div>\r\n            <List>\r\n                {tasksForTodolist.map(t => <Task key={t.id} task={t}/>)}\r\n                {!tasksForTodolist.length && <div style={{padding: '10px', color: 'black'}}>No tasks</div>}\r\n            </List>\r\n            <div>\r\n                <Button variant={todolist.filter === 'all' ? 'contained' : 'text'} color={'inherit'}\r\n                        onClick={() => onFilterButton('all')}>All\r\n                </Button>\r\n                <Button variant={todolist.filter === 'active' ? 'contained' : 'text'} color={'primary'}\r\n                        onClick={() => onFilterButton('active')}>Active\r\n                </Button>\r\n                <Button variant={todolist.filter === 'completed' ? 'contained' : 'text'} color={'success'}\r\n                        onClick={() => onFilterButton('completed')}>Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default TodoList;","import {AppRootStoreType} from \"../../utils/types\";\r\n\r\nexport const selectIsLoggedIn = (state: AppRootStoreType) => state.auth.isLoggedIn","import {authAPI} from \"../../api/todolists-api\";\r\nimport {\r\n    handleAsyncServerAppError,\r\n    handleAsyncServerNetworkError,\r\n} from \"../../utils/error-utils\";\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {LoginParamsType, ResultCodeStatuses} from \"../../api/types\";\r\nimport {appActions} from \"../CommonActions/App\";\r\nimport {ThunkError} from \"../../utils/types\";\r\nimport {todolistActions} from \"../TodolistList\";\r\n\r\nconst {setAppStatus} = appActions\r\n\r\nexport const login = createAsyncThunk<undefined, LoginParamsType, ThunkError>('auth/login', async (param, thunkAPI) => {\r\n        thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n        try {\r\n            const res = await authAPI.login(param)\r\n            if (res.data.resultCode === ResultCodeStatuses.success) {\r\n                thunkAPI.dispatch(setAppStatus({status: 'succeeded'}));\r\n                return\r\n            } else {\r\n                return handleAsyncServerAppError(res.data, thunkAPI);\r\n            }\r\n        } catch (err: any) {\r\n            return handleAsyncServerNetworkError(err, thunkAPI);\r\n        }\r\n    })\r\n\r\nconst logout = createAsyncThunk('auth/logout', async (param, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n    try {\r\n        const res = await authAPI.logout()\r\n        if (res.data.resultCode === ResultCodeStatuses.success) {\r\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}));\r\n            thunkAPI.dispatch(todolistActions.clearDataAC());\r\n            return\r\n        } else {\r\n            return handleAsyncServerAppError(res.data, thunkAPI);\r\n        }\r\n    } catch (err: any) {\r\n        return handleAsyncServerNetworkError(err, thunkAPI);\r\n    }\r\n})\r\n\r\nexport const asyncActions = {\r\n    login,\r\n    logout\r\n}\r\n\r\nexport const slice = createSlice({\r\n    name: 'auth',\r\n    initialState: {\r\n        isLoggedIn: false\r\n    },\r\n    reducers: {\r\n        setIsLoggedIn(state, action: PayloadAction<{ isLoggedIn: boolean }>) {\r\n            state.isLoggedIn = action.payload.isLoggedIn\r\n        }\r\n    },\r\n    extraReducers: builder => {\r\n        builder.addCase(login.fulfilled, (state) => {\r\n            state.isLoggedIn = true\r\n        })\r\n        builder.addCase(logout.fulfilled, (state) => {\r\n            state.isLoggedIn = false\r\n        })\r\n    }\r\n})\r\n","import React from 'react'\r\nimport Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport {Paper} from \"@mui/material\";\r\nimport {FormikHelpers, useFormik} from \"formik\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {authActions, authSelectors} from \"./index\";\r\nimport {useAppDispatch} from \"../../utils/redux-utils\";\r\nimport {login} from \"./auth-reducer\";\r\n\r\ntype FormikType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\nexport const Login = () => {\r\n    const dispatch = useAppDispatch()\r\n\r\n    const isLoggedIn = useSelector(authSelectors.selectIsLoggedIn);\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: 'free@samuraijs.com',\r\n            password: 'free',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            if (!values.email) {\r\n                return {email: 'Email is equired'};\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                return {email: 'Invalid email address'};\r\n            }\r\n\r\n            if (!values.password) {\r\n                return {password: 'Password is required'};\r\n            } else if (values.password.length < 3) {\r\n                return {password: 'Minimum 3 symbols'};\r\n            }\r\n        },\r\n        onSubmit: async (values: FormikType, formikHelpers: FormikHelpers<FormikType>) => {\r\n            const action = await dispatch(authActions.login(values));\r\n            if (login.rejected.match(action)) {\r\n                if (action.payload?.fieldsErrors?.length) {\r\n                    const error = action.payload?.fieldsErrors[0]\r\n                    formikHelpers.setFieldError(error.field, error.error)\r\n                }\r\n            }\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Navigate to={'/'}/>\r\n    }\r\n\r\n    return <Grid container justifyContent={'center'} style={{padding: '30px'}}>\r\n        <Grid item justifyContent={'center'}>\r\n            <Paper style={{padding: '20px', background: 'rgb(255,250,250, 0.9)'}}>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <FormControl>\r\n                        <FormLabel>\r\n                            <p>{'To log in get registered '}\r\n                                <a href={'https://social-network.samuraijs.com/'}\r\n                                   target={'_blank'}\r\n                                   rel=\"noopener noreferrer\">here\r\n                                </a>\r\n                            </p>\r\n                            <p>or use common test account credentials:</p>\r\n                            <p>Email: free@samuraijs.com</p>\r\n                            <p>Password: free</p>\r\n                        </FormLabel>\r\n                        <FormGroup>\r\n                            <TextField\r\n                                label=\"Email\"\r\n                                margin=\"normal\"\r\n                                {...formik.getFieldProps('email')}\r\n                            />\r\n                            {formik.touched.email\r\n                                && formik.errors.email\r\n                                && <div style={{color: 'red'}}>{formik.errors.email}</div>}\r\n                            <TextField\r\n                                type=\"password\"\r\n                                label=\"Password\"\r\n                                margin=\"normal\"\r\n                                {...formik.getFieldProps('password')}\r\n                            />\r\n                            {formik.touched.password\r\n                                && formik.errors.password\r\n                                && <div style={{color: 'red'}}>{formik.errors.password}</div>}\r\n                            <FormControlLabel\r\n                                label={'Remember me'}\r\n                                control={<Checkbox checked={formik.values.rememberMe}/>}\r\n                                {...formik.getFieldProps('rememberMe')}\r\n                            />\r\n                            <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                        </FormGroup>\r\n                    </FormControl>\r\n                </form>\r\n            </Paper>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import * as authSelectors from './selectors';\r\nimport {Login} from './Login';\r\nimport {asyncActions, slice} from \"./auth-reducer\";\r\n\r\nconst authActions = {\r\n    ...asyncActions,\r\n    ...slice.actions\r\n}\r\n\r\nconst authReducer = slice.reducer\r\n\r\nexport {\r\n    authSelectors,\r\n    Login,\r\n    authActions,\r\n    authReducer\r\n}","import React, {useCallback, useEffect} from 'react';\r\nimport {useSelector} from \"react-redux\";\r\nimport {Grid, Paper} from \"@mui/material\";\r\nimport TodoList from \"./todolist/TodoList\";\r\nimport AddItemForm from \"../../components/AddItemForm/AddItemForm\";\r\nimport {useNavigate} from \"react-router-dom\";\r\nimport {authSelectors} from \"../Auth\";\r\nimport {todolistActions, todolistSelectors} from \"./index\";\r\nimport {useActions, useAppDispatch} from \"../../utils/redux-utils\";\r\n\r\nconst TodolistsList = () => {\r\n    const dispatch = useAppDispatch()\r\n\r\n    const todolists = useSelector(todolistSelectors.selectTodolists);\r\n    const tasks = useSelector(todolistSelectors.selectTasks);\r\n    const isLoggedIn = useSelector(authSelectors.selectIsLoggedIn);\r\n    const navigate = useNavigate()\r\n\r\n    const {getTodolists, addTodolist} = useActions(todolistActions)\r\n\r\n    useEffect(() => {\r\n        if(isLoggedIn) {\r\n            getTodolists()\r\n        } else {\r\n            navigate('/login')\r\n        }\r\n    }, [isLoggedIn])\r\n\r\n    const addTodolists = useCallback((title: string) => {\r\n            addTodolist(title)\r\n    }, [dispatch])\r\n\r\n    return (\r\n        <div>\r\n            <Grid container style={{padding: '30px'}}>\r\n                <Paper style={{padding: '20px', background: 'rgb(255,250,250, 0.9)'}}>\r\n                    <AddItemForm callbackAddValue={addTodolists}/>\r\n                </Paper>\r\n            </Grid>\r\n            <Grid container spacing={3}>\r\n                {todolists.map(el => {\r\n                    let todolistTasks = tasks[el.id]\r\n\r\n                    return <Grid key={el.id} item>\r\n                            <Paper style={{padding: '15px', background: 'rgb(255,250,250, 0.9)'}} elevation={5}>\r\n                                <TodoList todolist={el} key={el.id} tasks={todolistTasks}/>\r\n                            </Paper>\r\n                        </Grid>\r\n                    }\r\n                )}\r\n            </Grid>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TodolistsList;","import {authAPI} from \"../../api/todolists-api\";\r\nimport {createAsyncThunk, createSlice} from \"@reduxjs/toolkit\";\r\nimport {handleAsyncServerAppError, handleAsyncServerNetworkError} from \"../../utils/error-utils\";\r\nimport {authActions} from \"../Auth\";\r\nimport {appActions} from \"../CommonActions/App\";\r\nimport {ResultCodeStatuses} from \"../../api/types\";\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n    // происходит ли сейчас взаимодействие с сервером\r\n    status: RequestStatusType\r\n    // если ошибка какая-то глобальная произойдёт - мы запишем текст ошибки сюда\r\n    error: string | null\r\n    // true когда приложение проинициализировалось (проверили юзера, настройки получили и т.д.)\r\n    isInitialized: boolean\r\n}\r\nconst {setIsLoggedIn} = authActions\r\n\r\nconst initializedApp = createAsyncThunk('app/initializedApp', async (param, thunkAPI) => {\r\n    try {\r\n        const res = await authAPI.me()\r\n        if (res.data.resultCode === ResultCodeStatuses.success) {\r\n            thunkAPI.dispatch(setIsLoggedIn({isLoggedIn: true}))\r\n        } else {\r\n            return handleAsyncServerAppError(res.data, thunkAPI)\r\n        }\r\n    } catch (err: any) {\r\n        return handleAsyncServerNetworkError(err, thunkAPI)\r\n    }\r\n})\r\n\r\nexport const asyncActions = {\r\n    initializedApp\r\n}\r\n\r\nexport const slice = createSlice({\r\n    name: 'app',\r\n    initialState: {\r\n        status: 'idle',\r\n        error: null,\r\n        isInitialized: false\r\n    } as InitialStateType,\r\n    reducers: {},\r\n    extraReducers: builder => {\r\n        builder.addCase(initializedApp.fulfilled, (state) => {\r\n            state.isInitialized = true\r\n        });\r\n        builder.addCase(appActions.setAppError, (state, action) => {\r\n            state.error = action.payload.error\r\n        });\r\n        builder.addCase(appActions.setAppStatus, (state, action) => {\r\n            state.status = action.payload.status\r\n        })\r\n    }\r\n})\r\n","import * as appSelectors from './selectors'\r\nimport {asyncActions, slice} from \"./app-reducer\";\r\n\r\nconst appReducer = slice.reducer\r\nconst actions = slice.actions\r\n\r\nconst appActions = {\r\n    ...actions,\r\n    ...asyncActions\r\n}\r\nexport {\r\n    appSelectors,\r\n    appReducer,\r\n    appActions\r\n}\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport './App.css';\r\nimport {\r\n    AppBar,\r\n    Box,\r\n    Button, CircularProgress,\r\n    Container,\r\n    IconButton,\r\n    LinearProgress,\r\n    Toolbar,\r\n    Typography\r\n} from \"@mui/material\";\r\nimport {Menu} from \"@mui/icons-material\";\r\nimport {ErrorSnackbar} from \"../components/ErrorSnackBar/ErrorSnackBar\";\r\nimport {Navigate, Route, Routes} from \"react-router-dom\";\r\nimport TodolistsList from \"../features/TodolistList/TodolistsList\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {selectIsInitialized, selectStatus} from \"../features/App/selectors\";\r\nimport {authActions, authSelectors, Login} from \"../features/Auth\";\r\nimport {useActions} from \"../utils/redux-utils\";\r\nimport {appActions} from \"../features/App\";\r\n\r\nfunction App() {\r\n    const status = useSelector(selectStatus);\r\n    const isInitialized = useSelector(selectIsInitialized);\r\n    const isLoggedIn = useSelector(authSelectors.selectIsLoggedIn);\r\n\r\n    const {logout} = useActions(authActions)\r\n    const {initializedApp} = useActions(appActions)\r\n\r\n    const logoutHandler = useCallback(() => logout(), [])\r\n\r\n    useEffect(() => {\r\n        initializedApp()\r\n    }, [])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <Box sx={{flexGrow: 1}}>\r\n                <AppBar position=\"static\" color={'default'}>\r\n                    <Toolbar>\r\n                        <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\" sx={{mr: 2}}>\r\n                            <Menu/>\r\n                        </IconButton>\r\n                        <Typography variant=\"h6\" component=\"div\" sx={{flexGrow: 1}}>\r\n                            TO DO LIST\r\n                        </Typography>\r\n                        {isLoggedIn && <Button color=\"inherit\" onClick={logoutHandler}>Log out</Button>}\r\n                    </Toolbar>\r\n                    {status === 'loading' && <LinearProgress/>}\r\n                </AppBar>\r\n            </Box>\r\n            <Container fixed>\r\n                <Routes>\r\n                    <Route path=\"/\" element={<TodolistsList/>}/>\r\n                    <Route path=\"/login\" element={<Login/>}/>\r\n                    <Route path=\"/404\"\r\n                           element={<h1 style={{textAlign: 'center', color: 'white'}}>404 page not found</h1>}/>\r\n                    <Route path={'*'} element={<Navigate to={'404'}/>}/>\r\n                </Routes>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import {combineReducers} from \"redux\";\r\nimport thunk from 'redux-thunk'\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\nimport {authReducer} from \"../features/Auth\";\r\nimport {appReducer} from \"../features/App\";\r\nimport {tasksReducer, todolistReducer} from \"../features/TodolistList\";\r\n\r\nexport const rootReducer = combineReducers({\r\n    todolists: todolistReducer,\r\n    tasks: tasksReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunk)\r\n})\r\n\r\n// useAppSelector - hook/container with already an applied type of the whole app. No need app type in useSelector now.\r\n// export const useAppSelector: TypedUseSelectorHook<AppRootStoreType> = useSelector\r\n\r\n//@ts-ignore\r\nwindow.store = store","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './app/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./app/store\";\r\nimport {HashRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <HashRouter>\r\n            <App/>\r\n        </HashRouter>\r\n    </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}